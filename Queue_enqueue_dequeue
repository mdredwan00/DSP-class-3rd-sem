#include <iostream>

#define MAX_SIZE 100

class Queue {
private:
    int items[MAX_SIZE]; // Array to store queue elements
    int front; // Index of the front element
    int rear;  // Index of the rear element

public:
    Queue() {
        front = -1; // Initialize front and rear as -1, indicating an empty queue
        rear = -1;
    }

    // Check if the queue is full
    bool isFull() {
        return rear == MAX_SIZE - 1; // If rear is at the end of the array, the queue is full
    }

    // Check if the queue is empty
    bool isEmpty() {
        return front == -1 && rear == -1; // If both front and rear are -1, the queue is empty
    }

    // Add an element to the queue
    void enqueue(int data) {
        if (isFull()) { // Check if the queue is full
            std::cout << "Queue is full" << std::endl; // Print a message if the queue is full
            return;
        } else if (isEmpty()) { // If the queue is empty
            front = rear = 0; // Set front and rear to 0
        } else { // If the queue is neither full nor empty
            rear++; // Increment rear
        }
        items[rear] = data; // Add the new element at the rear position
    }

    // Remove an element from the queue
    int dequeue() {
        int data;
        if (isEmpty()) { // Check if the queue is empty
            std::cout << "Queue is empty" << std::endl; // Print a message if the queue is empty
            return -1;
        } else if (front == rear) { // If there is only one element in the queue
            data = items[front]; // Store the data of the front element
            front = rear = -1; // Reset front and rear to -1
        } else { // If there are more than one elements in the queue
            data = items[front]; // Store the data of the front element
            front++; // Increment front
        }
        return data; // Return the dequeued data
    }
};

int main() {
    Queue q; // Create a Queue object

    // Enqueue elements into the queue
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);

    std::cout << "Queue: ";
    // Dequeue and print elements until the queue is empty
    while (!q.isEmpty()) {
        std::cout << q.dequeue() << " ";
    }
    std::cout << std::endl;

    return 0;
}
